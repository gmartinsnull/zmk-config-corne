/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};
&led_strip {
  chain-length = <27>; // 21 backlight + 6 underglow
};

/ {
    combos {
        compatible = "zmk,combos";

        Capslock {
          bindings = <&kp CLCK>;
          key-positions = <5 6>;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
    // -----------------------------------------------------------------------------------------
    // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
    // |  TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
    // | SHFT |CTR/Z|  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
    //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
            bindings = <
       &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
       &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
       &kp LSHFT &mt LCTRL Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &trans
                      &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
            >;
        };

        lower_layer {
    // -----------------------------------------------------------------------------------------
    // |  `  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  -  |
    // | TAB | BT1 | BT2 | BT3 | BT4 |BTCLR|   |     |     |  UP |     |     |     |
    // | SHFT|     |     | EPWR| RGB | EFF |   |     | LFT | DWN | RGT |     |     |
    //                   | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
       &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS
       &kp TAB &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &trans &trans &kp UP &trans &trans &trans
       &kp LSHFT &trans &trans &ext_power EP_TOG &rgb_ug RGB_TOG &rgb_ug RGB_EFF   &trans &kp LEFT &kp DOWN &kp RIGHT &trans &trans
                        &kp LGUI &trans &kp SPACE   &kp RET &trans &kp RALT
            >;
        };

        raise_layer {
    // -----------------------------------------------------------------------------------------
    // |  ~   |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |   _  |
    // | TAB |     |     |     |     |     |   |     |     |  =  |  [  |  ]  |  \  |
    // | SHFT |     |     |     |     |     |   |     |     |     |     |     |     |
    //                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
       &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp UNDER
       &kp TAB &trans &trans &trans &trans &trans  &trans &trans &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp COLON &kp DQT
       &kp LSHFT &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
                         &kp LGUI &trans &kp SPACE   &kp RET &trans &kp RALT
            >;
        };

        extended_layer {
    // -----------------------------------------------------------------------------------------
    // |  F1 |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
    // | CTRL| BRI-| BRI+|     |     |     |   |  << |  >  |  >> | MUTE| VOL-| VOL+|
    // | SHFT| PWR |     |     |     |     |   |     |     |     |     |     |     |
    //            | GUI |     | SPC |     |   | ENT |     | ALT |
            bindings = <
       &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6   &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
       &kp LCTRL &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC &trans &trans &trans   &kp C_PREV &kp C_PP &kp C_NEXT &kp K_MUTE &kp K_VOL_DN &kp K_VOL_UP
       &kp LSHIFT &kp K_PWR &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans
                     &trans &trans &trans   &trans &trans &trans
              >;
        };
    };
};
